<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="domain.listen.dao.NoteDao">

    <sql id="noteConditionSql">
        <!--<if test="beginDate!=null and beginDate!=''">-->
            <!--<![CDATA[AND DATE(t.CREATE_DATA)>=#{beginDate}]]>-->
        <!--</if>-->
        <!--<if test="endDate!=null and endDate!=''">-->
            <!--<![CDATA[AND DATE(t.CREATE_DATA)<=#{endDate}]]>-->
        <!--</if>-->
    </sql>

    <!--听课笔记新增-->
    <insert id="noteComment" >
        INSERT INTO t_listen_notes
        (
        LISTENER_ID,
        SCHOOL_ID,
        CLASS_NAME,
        TEACHER_NAME,
        DISCIPLINE_ID,
        SUBJECT,
        SHARE_FLAGE,
        COMMENTS,
        PICTURE_PATH,
        SCORE_ID,
        LISTENER_PATH,
        CREATE_USER_ID,
        CREATE_DATA
        ) VALUE (
        #{listenerId},
        #{schoolId},
        #{className},
        #{teacherName},
        #{disciplineId},
        #{subject},
        #{shareFlag},
        #{comments},
        #{picturePath},
        #{scoreId},
        #{listenPath},
        #{createUserId},
        NOW()
        )
    </insert>

    <!--听课笔记修改-->
    <update id="noteEdit">
        UPDATE t_listen_notes SET
        TEACHER_NAME=#{teacherName},
        SUBJECT=#{subject},
        COMMENTS=#{comments},
        UPDATE_USER_ID=#{updateUserId},
        UPDATE_DATA=NOW()
        WHERE ID=#{id}
    </update>

    <!--查看自己的笔记-->
    <select id="getOwnNote" resultType="NoteEntityInfo">
        SELECT
        t.ID id,
        t.LISTENER_ID listenerId,
        (SELECT b.LISTENER_NAME FROM  t_person_listener b where b.ID=t.LISTENER_ID) listenerName,
        t.SCHOOL_ID schoolId,
        (SELECT b.SCHOOL_NAME FROM  t_sys_school b where b.ID=t.SCHOOL_ID) schoolName,
        t.CLASS_NAME className,
        t.TEACHER_NAME teacherName,
        t.DISCIPLINE_ID disciplineId,
        (SELECT b.PARAM_NAME FROM  t_sys_parameter b where b.ID=t.DISCIPLINE_ID) disciplineName,
        t.SUBJECT subject,
        t.SHARE_FLAGE shareFlag,
        t.COMMENTS comments,
        t.PICTURE_PATH picturePath,
        t.SCORE_ID scoreId,
        (SELECT b.PARAM_NAME FROM  t_sys_parameter b where b.ID=t.SCORE_ID) scoreName,
        t.LISTENER_PATH listenPath,
        t.CREATE_USER_ID createUserId,
        t.CREATE_DATA createDate,
        t.UPDATE_USER_ID updateUserId,
        t.UPDATE_DATA updateDate
        FROM t_listen_notes t
        WHERE t.DELETE_FLAG='1'
        AND t.LISTENER_ID=#{listenerId}
        <if test="yearString!=null and yearString!=''">
            AND Year(t.CREATE_DATA) = #{yearString}
        </if>
        <if test="monthString!=null and monthString!=''">
            AND Month(t.CREATE_DATA) = #{monthString}
        </if>
        ORDER BY t.CREATE_DATA DESC
    </select>

    <!--查看分享的笔记-->
    <select id="getShareNote" resultType="NoteEntityInfo">
        SELECT
        t.ID id,
        t.LISTENER_ID listenerId,
        (SELECT b.LISTENER_NAME FROM  t_person_listener b where b.ID=t.LISTENER_ID) listenerName,
        t.SCHOOL_ID schoolId,
        (SELECT b.SCHOOL_NAME FROM  t_sys_school b where b.ID=t.SCHOOL_ID) schoolName,
        t.CLASS_NAME className,
        t.TEACHER_NAME teacherName,
        t.DISCIPLINE_ID disciplineId,
        (SELECT b.PARAM_NAME FROM  t_sys_parameter b where b.ID=t.DISCIPLINE_ID) disciplineName,
        t.SUBJECT subject,
        t.SHARE_FLAGE shareFlag,
        t.COMMENTS comments,
        t.PICTURE_PATH picturePath,
        t.SCORE_ID scoreId,
        (SELECT b.PARAM_NAME FROM  t_sys_parameter b where b.ID=t.SCORE_ID) scoreName,
        t.LISTENER_PATH listenPath,
        t.CREATE_USER_ID createUserId,
        t.CREATE_DATA createDate,
        t.UPDATE_USER_ID updateUserId,
        t.UPDATE_DATA updateDate
        FROM t_listen_notes t
        WHERE t.DELETE_FLAG='1'
        AND t.SHARE_FLAGE='1'
        <include refid="noteConditionSql"/>
        ORDER BY t.CREATE_DATA DESC
    </select>

    <!--查看所有的笔记-->
    <select id="getAllNote" resultType="NoteEntityInfo">
        SELECT
        t.ID id,
        t.LISTENER_ID listenerId,
        (SELECT b.LISTENER_NAME FROM  t_person_listener b where b.ID=t.LISTENER_ID) listenerName,
        t.SCHOOL_ID schoolId,
        (SELECT b.SCHOOL_NAME FROM  t_sys_school b where b.ID=t.SCHOOL_ID) schoolName,
        t.CLASS_NAME className,
        t.TEACHER_NAME teacherName,
        t.DISCIPLINE_ID disciplineId,
        (SELECT b.PARAM_NAME FROM  t_sys_parameter b where b.ID=t.DISCIPLINE_ID) disciplineName,
        t.SUBJECT subject,
        t.SHARE_FLAGE shareFlag,
        t.COMMENTS comments,
        t.PICTURE_PATH picturePath,
        t.SCORE_ID scoreId,
        (SELECT b.PARAM_NAME FROM  t_sys_parameter b where b.ID=t.SCORE_ID) scoreName,
        t.LISTENER_PATH listenPath,
        t.CREATE_USER_ID createUserId,
        t.CREATE_DATA createDate,
        t.UPDATE_USER_ID updateUserId,
        t.UPDATE_DATA updateDate
        FROM t_listen_notes t
        WHERE t.DELETE_FLAG='1'
        <include refid="noteConditionSql"/>
        ORDER BY t.CREATE_DATA DESC
    </select>

    <!--获取当前登录人，本月听课节数-->
    <select id="getThisMonthCount" resultType="Integer">
        SELECT COUNT(*)
        FROM t_listen_notes t
        WHERE t.DELETE_FLAG='1'
        AND t.LISTENER_ID=#{listenerId}
        AND DATE_FORMAT(t.CREATE_DATA,'%Y-%m')=DATE_FORMAT(NOW(),'%Y-%m')
    </select>

    <!--获取当前登录人,累计听课节数-->
    <select id="getAllCount" resultType="Integer">
        SELECT COUNT(*)
        FROM t_listen_notes t
        WHERE t.DELETE_FLAG='1'
        AND t.LISTENER_ID=#{listenerId}
    </select>

    <!--获取公告消息-->
    <select id="getPhoneMessage" resultType="PhoneEntityInfo">
        SELECT
        t.ID id,
        t.TITLE title,
        t.MESSAGE message,
        t.CREATE_USER_ID createUserId,
        t.CREATE_DATA createDate,
        t.UPDATE_USER_ID updateUserId,
        t.UPDATE_DATA updateDate
        FROM t_message_phone t
        WHERE t.DELETE_FLAG='1'
        ORDER BY t.CREATE_DATA DESC
    </select>

</mapper>